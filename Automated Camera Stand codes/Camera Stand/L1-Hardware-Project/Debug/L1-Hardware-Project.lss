
L1-Hardware-Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  00000f5c  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000e6  008000e6  00001076  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001076  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004e5f  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000157c  00000000  00000000  0000626f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a32  00000000  00000000  000077eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b8  00000000  00000000  00009220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acd  00000000  00000000  000099d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f0d  00000000  00000000  0000a4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__vector_3>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	4e 41       	sbci	r20, 0x1E	; 30
  56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
  57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
  5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
  5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
  6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
  77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
  87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
  90:	11 24       	eor	r1, r1
  92:	1f be       	out	0x3f, r1	; 63
  94:	cf e5       	ldi	r28, 0x5F	; 95
  96:	d8 e0       	ldi	r29, 0x08	; 8
  98:	de bf       	out	0x3e, r29	; 62
  9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	a0 e6       	ldi	r26, 0x60	; 96
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ec e5       	ldi	r30, 0x5C	; 92
  a4:	ff e0       	ldi	r31, 0x0F	; 15
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
  a8:	05 90       	lpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3e       	cpi	r26, 0xE6	; 230
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	a6 ee       	ldi	r26, 0xE6	; 230
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 3f       	cpi	r26, 0xF5	; 245
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 67 00 	call	0xce	; 0xce <main>
  c6:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <main>:

#include "src/defines.h"

int main(void) {
	
	sys_init();
  ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <sys_init>
	
	while(1) {
		
		sys_loop();
  d2:	0e 94 15 01 	call	0x22a	; 0x22a <sys_loop>
  d6:	fd cf       	rjmp	.-6      	; 0xd2 <main+0x4>

000000d8 <sys_init>:
 */

#include "defines.h"


void sys_init(void) {
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	a8 97       	sbiw	r28, 0x28	; 40
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
	I2C_master_init();
  f4:	0e 94 1a 01 	call	0x234	; 0x234 <I2C_master_init>
	LCD_init();
  f8:	0e 94 7f 03 	call	0x6fe	; 0x6fe <LCD_init>
	
	LCD_clear_msg("Group 47 Slave");
  fc:	88 e7       	ldi	r24, 0x78	; 120
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 c7 03 	call	0x78e	; 0x78e <LCD_clear_msg>
	LCD_line_2();
 104:	0e 94 00 04 	call	0x800	; 0x800 <LCD_line_2>
	LCD_msg("Initializing....");
 108:	87 e8       	ldi	r24, 0x87	; 135
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	8f e1       	ldi	r24, 0x1F	; 31
 112:	9e e4       	ldi	r25, 0x4E	; 78
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <sys_init+0x3c>
 118:	00 c0       	rjmp	.+0      	; 0x11a <sys_init+0x42>
 11a:	00 00       	nop
	_delay_ms(10);
	
	SPI_master_init();
 11c:	0e 94 8f 04 	call	0x91e	; 0x91e <SPI_master_init>
	nrf_init(NRF_MODE_PRX, NRF_RX_PLOAD);
 120:	69 e0       	ldi	r22, 0x09	; 9
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	0e 94 99 02 	call	0x532	; 0x532 <nrf_init>
	
	LCD_line_2();
 12a:	0e 94 00 04 	call	0x800	; 0x800 <LCD_line_2>
	LCD_msg("Init Completed.");
 12e:	88 e9       	ldi	r24, 0x98	; 152
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	e4 e3       	ldi	r30, 0x34	; 52
 13a:	fc e0       	ldi	r31, 0x0C	; 12
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	e0 40       	sbci	r30, 0x00	; 0
 140:	f0 40       	sbci	r31, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <sys_init+0x64>
 144:	00 c0       	rjmp	.+0      	; 0x146 <sys_init+0x6e>
 146:	00 00       	nop
	_delay_ms(500);
	
	LCD_clear();
 148:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_clear>
	
	LCD_line_1();
 14c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_line_1>
	LCD_msg("Enter Location");
 150:	88 ea       	ldi	r24, 0xA8	; 168
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	84 e3       	ldi	r24, 0x34	; 52
 15c:	9c e0       	ldi	r25, 0x0C	; 12
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <sys_init+0x86>
 166:	00 c0       	rjmp	.+0      	; 0x168 <sys_init+0x90>
 168:	00 00       	nop
	_delay_ms(500);
	
	char * temp;
	
	LCD_line_1();
 16a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_line_1>
	LCD_msg("Longitude       ");
 16e:	87 eb       	ldi	r24, 0xB7	; 183
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
	LCD_line_2();
 176:	0e 94 00 04 	call	0x800	; 0x800 <LCD_line_2>
	char longitude[20];
	key_string(longitude, 20);
 17a:	64 e1       	ldi	r22, 0x14	; 20
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 c2 01 	call	0x384	; 0x384 <key_string>
	destination.longitude = strtod(longitude, temp);
 186:	e1 2c       	mov	r14, r1
 188:	f1 2c       	mov	r15, r1
 18a:	b7 01       	movw	r22, r14
 18c:	ce 01       	movw	r24, r28
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	0e 94 c0 05 	call	0xb80	; 0xb80 <strtod>
 194:	09 ee       	ldi	r16, 0xE9	; 233
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	f8 01       	movw	r30, r16
 19a:	60 83       	st	Z, r22
 19c:	71 83       	std	Z+1, r23	; 0x01
 19e:	82 83       	std	Z+2, r24	; 0x02
 1a0:	93 83       	std	Z+3, r25	; 0x03
	
	LCD_clear();
 1a2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_clear>
	
	LCD_line_1();
 1a6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <LCD_line_1>
	LCD_msg("Latitude        ");
 1aa:	88 ec       	ldi	r24, 0xC8	; 200
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
	LCD_line_2();
 1b2:	0e 94 00 04 	call	0x800	; 0x800 <LCD_line_2>
	char latitude[20];
	key_string(latitude, 20);
 1b6:	64 e1       	ldi	r22, 0x14	; 20
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	ce 01       	movw	r24, r28
 1bc:	45 96       	adiw	r24, 0x15	; 21
 1be:	0e 94 c2 01 	call	0x384	; 0x384 <key_string>
	destination.latitude = strtod(latitude, temp);
 1c2:	b7 01       	movw	r22, r14
 1c4:	ce 01       	movw	r24, r28
 1c6:	45 96       	adiw	r24, 0x15	; 21
 1c8:	0e 94 c0 05 	call	0xb80	; 0xb80 <strtod>
 1cc:	f8 01       	movw	r30, r16
 1ce:	64 83       	std	Z+4, r22	; 0x04
 1d0:	75 83       	std	Z+5, r23	; 0x05
 1d2:	86 83       	std	Z+6, r24	; 0x06
 1d4:	97 83       	std	Z+7, r25	; 0x07
	
	
	LCD_clear();
 1d6:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <LCD_clear>
	LCD_msg("Lon: ");
 1da:	89 ed       	ldi	r24, 0xD9	; 217
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
	LCD_msg(longitude);
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>

	LCD_line_2();
 1ea:	0e 94 00 04 	call	0x800	; 0x800 <LCD_line_2>

	LCD_msg("Lat: ");
 1ee:	8f ed       	ldi	r24, 0xDF	; 223
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
	LCD_msg(latitude);
 1f6:	ce 01       	movw	r24, r28
 1f8:	45 96       	adiw	r24, 0x15	; 21
 1fa:	0e 94 b1 03 	call	0x762	; 0x762 <LCD_msg>
 1fe:	ff ef       	ldi	r31, 0xFF	; 255
 200:	23 ed       	ldi	r18, 0xD3	; 211
 202:	80 e3       	ldi	r24, 0x30	; 48
 204:	f1 50       	subi	r31, 0x01	; 1
 206:	20 40       	sbci	r18, 0x00	; 0
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <sys_init+0x12c>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <sys_init+0x136>
 20e:	00 00       	nop
	_delay_ms(2000);
}
 210:	a8 96       	adiw	r28, 0x28	; 40
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	08 95       	ret

0000022a <sys_loop>:


int kp = 5, kq = 5, kr = 30, ks = 10, base_speed = 100;


void sys_loop(void) {
 22a:	08 95       	ret

0000022c <I2C_wait_to_process>:

#include "../defines.h"


void I2C_wait_to_process() {
	while ((TWCR & (1 << TWINT)) == 0);
 22c:	06 b6       	in	r0, 0x36	; 54
 22e:	07 fe       	sbrs	r0, 7
 230:	fd cf       	rjmp	.-6      	; 0x22c <I2C_wait_to_process>
}
 232:	08 95       	ret

00000234 <I2C_master_init>:
/************************************************************************/
/* Master                                                               */
/************************************************************************/

void I2C_master_init() {
	TWBR = 0x62;		// Baud rate is set by calculating
 234:	82 e6       	ldi	r24, 0x62	; 98
 236:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWEN);	// Enable I2C
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	86 bf       	out	0x36, r24	; 54
	TWSR = 0x00;		// Pre-scaler set to 1
 23c:	11 b8       	out	0x01, r1	; 1
 23e:	08 95       	ret

00000240 <I2C_start>:
}

//Start condition
void I2C_start() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);	//start condition
 240:	84 ea       	ldi	r24, 0xA4	; 164
 242:	86 bf       	out	0x36, r24	; 54
	I2C_wait_to_process();
 244:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_wait_to_process>
 248:	08 95       	ret

0000024a <I2C_write>:
}

//I2C stop condition
void I2C_write(unsigned char x) {
	TWDR = x;						//Move value to I2C
 24a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);	//Enable I2C and clear interrupt
 24c:	84 e8       	ldi	r24, 0x84	; 132
 24e:	86 bf       	out	0x36, r24	; 54
	I2C_wait_to_process();
 250:	0e 94 16 01 	call	0x22c	; 0x22c <I2C_wait_to_process>
 254:	08 95       	ret

00000256 <I2C_select_slave>:
}

void I2C_select_slave(unsigned char address, int mode) {
	I2C_write(address + mode);
 256:	86 0f       	add	r24, r22
 258:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 25c:	08 95       	ret

0000025e <I2C_stop>:
}

void I2C_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 25e:	84 e9       	ldi	r24, 0x94	; 148
 260:	86 bf       	out	0x36, r24	; 54
 262:	08 95       	ret

00000264 <key_char>:
unsigned char colloc, rowloc;


char key_char() {
	while(1) {
		KEY_DDR = 0xF0;           /* set port direction as input-output */
 264:	80 ef       	ldi	r24, 0xF0	; 240
 266:	8a bb       	out	0x1a, r24	; 26
		KEY_PRT = 0xFF;
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	8b bb       	out	0x1b, r24	; 27

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
 272:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
 274:	89 b3       	in	r24, 0x19	; 25
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
		} while(colloc != 0x0F);
 27c:	8f 30       	cpi	r24, 0x0F	; 15
 27e:	b1 f7       	brne	.-20     	; 0x26c <key_char+0x8>
 280:	8f e3       	ldi	r24, 0x3F	; 63
 282:	9c e9       	ldi	r25, 0x9C	; 156
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <key_char+0x20>
 288:	00 c0       	rjmp	.+0      	; 0x28a <key_char+0x26>
 28a:	00 00       	nop
		do
		{
			do
			{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
 28c:	89 b3       	in	r24, 0x19	; 25
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
			} while(colloc == 0x0F);        /* check for any key press */
 294:	8f 30       	cpi	r24, 0x0F	; 15
 296:	a1 f3       	breq	.-24     	; 0x280 <key_char+0x1c>
 298:	9f ef       	ldi	r25, 0xFF	; 255
 29a:	29 ef       	ldi	r18, 0xF9	; 249
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	91 50       	subi	r25, 0x01	; 1
 2a0:	20 40       	sbci	r18, 0x00	; 0
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <key_char+0x3a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <key_char+0x44>
 2a8:	00 00       	nop
			
			_delay_ms (40);	            /* 20 ms key debounce time */
			colloc = (KEY_PIN & 0x0F);
 2aa:	89 b3       	in	r24, 0x19	; 25
 2ac:	8f 70       	andi	r24, 0x0F	; 15
 2ae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
		} while(colloc == 0x0F);
 2b2:	8f 30       	cpi	r24, 0x0F	; 15
 2b4:	29 f3       	breq	.-54     	; 0x280 <key_char+0x1c>

		/* now check for rows */
		KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
 2b6:	8f ee       	ldi	r24, 0xEF	; 239
 2b8:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 2ba:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 2bc:	89 b3       	in	r24, 0x19	; 25
 2be:	8f 70       	andi	r24, 0x0F	; 15
 2c0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
		if(colloc != 0x0F)
 2c4:	8f 30       	cpi	r24, 0x0F	; 15
 2c6:	19 f0       	breq	.+6      	; 0x2ce <key_char+0x6a>
		{
			rowloc = 0;
 2c8:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <rowloc>
			break;
 2cc:	27 c0       	rjmp	.+78     	; 0x31c <key_char+0xb8>
		}

		KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
 2ce:	8f ed       	ldi	r24, 0xDF	; 223
 2d0:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 2d2:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 2d4:	89 b3       	in	r24, 0x19	; 25
 2d6:	8f 70       	andi	r24, 0x0F	; 15
 2d8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
		if(colloc != 0x0F)
 2dc:	8f 30       	cpi	r24, 0x0F	; 15
 2de:	21 f0       	breq	.+8      	; 0x2e8 <key_char+0x84>
		{
			rowloc = 1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <rowloc>
			break;
 2e6:	1a c0       	rjmp	.+52     	; 0x31c <key_char+0xb8>
		}
		
		KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
 2e8:	8f eb       	ldi	r24, 0xBF	; 191
 2ea:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 2ec:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 2ee:	89 b3       	in	r24, 0x19	; 25
 2f0:	8f 70       	andi	r24, 0x0F	; 15
 2f2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
		if(colloc != 0x0F)
 2f6:	8f 30       	cpi	r24, 0x0F	; 15
 2f8:	21 f0       	breq	.+8      	; 0x302 <key_char+0x9e>
		{
			rowloc = 2;
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <rowloc>
			break;
 300:	0d c0       	rjmp	.+26     	; 0x31c <key_char+0xb8>
		}

		KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
 302:	8f e7       	ldi	r24, 0x7F	; 127
 304:	8b bb       	out	0x1b, r24	; 27
		asm("NOP");
 306:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 308:	89 b3       	in	r24, 0x19	; 25
 30a:	8f 70       	andi	r24, 0x0F	; 15
 30c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <colloc>
		if(colloc != 0x0F)
 310:	8f 30       	cpi	r24, 0x0F	; 15
 312:	09 f4       	brne	.+2      	; 0x316 <key_char+0xb2>
 314:	a7 cf       	rjmp	.-178    	; 0x264 <key_char>
		{
			rowloc = 3;
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <rowloc>
			break;
		}
	}

	if(colloc == 0x0E)
 31c:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <colloc>
 320:	8e 30       	cpi	r24, 0x0E	; 14
 322:	59 f4       	brne	.+22     	; 0x33a <key_char+0xd6>
		return(keypad[rowloc][0]);
 324:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <rowloc>
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	e0 5a       	subi	r30, 0xA0	; 160
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	80 81       	ld	r24, Z
 338:	08 95       	ret
	else if(colloc == 0x0D)
 33a:	8d 30       	cpi	r24, 0x0D	; 13
 33c:	59 f4       	brne	.+22     	; 0x354 <key_char+0xf0>
		return(keypad[rowloc][1]);
 33e:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <rowloc>
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	ee 0f       	add	r30, r30
 346:	ff 1f       	adc	r31, r31
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e0 5a       	subi	r30, 0xA0	; 160
 34e:	ff 4f       	sbci	r31, 0xFF	; 255
 350:	81 81       	ldd	r24, Z+1	; 0x01
 352:	08 95       	ret
	else if(colloc == 0x0B)
 354:	8b 30       	cpi	r24, 0x0B	; 11
 356:	59 f4       	brne	.+22     	; 0x36e <key_char+0x10a>
		return(keypad[rowloc][2]);
 358:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <rowloc>
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	e0 5a       	subi	r30, 0xA0	; 160
 368:	ff 4f       	sbci	r31, 0xFF	; 255
 36a:	82 81       	ldd	r24, Z+2	; 0x02
 36c:	08 95       	ret
	else
		return(keypad[rowloc][3]);
 36e:	e0 91 f2 00 	lds	r30, 0x00F2	; 0x8000f2 <rowloc>
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	e0 5a       	subi	r30, 0xA0	; 160
 37e:	ff 4f       	sbci	r31, 0xFF	; 255
 380:	83 81       	ldd	r24, Z+3	; 0x03
}
 382:	08 95       	ret

00000384 <key_string>:


void key_string(char buffer[], int buff) {
 384:	cf 92       	push	r12
 386:	df 92       	push	r13
 388:	ef 92       	push	r14
 38a:	ff 92       	push	r15
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	6c 01       	movw	r12, r24
 394:	7b 01       	movw	r14, r22
	for(int i = 0; i < buff; i++) {
 396:	c0 e0       	ldi	r28, 0x00	; 0
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	10 c0       	rjmp	.+32     	; 0x3bc <key_string+0x38>
		char temp = key_char();
 39c:	0e 94 32 01 	call	0x264	; 0x264 <key_char>
 3a0:	18 2f       	mov	r17, r24
		LCD_char(temp);
 3a2:	0e 94 a1 03 	call	0x742	; 0x742 <LCD_char>
		if (temp == '=') {
 3a6:	1d 33       	cpi	r17, 0x3D	; 61
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <key_string+0x2e>
			buffer[i] = '\0';
 3aa:	cc 0d       	add	r28, r12
 3ac:	dd 1d       	adc	r29, r13
 3ae:	18 82       	st	Y, r1
			break;
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <key_string+0x3e>
		}
		buffer[i] = temp;
 3b2:	f6 01       	movw	r30, r12
 3b4:	ec 0f       	add	r30, r28
 3b6:	fd 1f       	adc	r31, r29
 3b8:	10 83       	st	Z, r17
		return(keypad[rowloc][3]);
}


void key_string(char buffer[], int buff) {
	for(int i = 0; i < buff; i++) {
 3ba:	21 96       	adiw	r28, 0x01	; 1
 3bc:	ce 15       	cp	r28, r14
 3be:	df 05       	cpc	r29, r15
 3c0:	6c f3       	brlt	.-38     	; 0x39c <key_string+0x18>
			buffer[i] = '\0';
			break;
		}
		buffer[i] = temp;
	}
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	ff 90       	pop	r15
 3ca:	ef 90       	pop	r14
 3cc:	df 90       	pop	r13
 3ce:	cf 90       	pop	r12
 3d0:	08 95       	ret

000003d2 <SPI_Init>:
#include "../../defines.h"

/* Initialize the SPI interface in Master mode with given SPI mode and clock rate division */
void SPI_Init(SPI_MODE_t mode, SPI_CLKDIV_t clk_div) {
	/* Set MOSI, SCK, SS as ouput */
	SPI_DDR |= (1 << MOSI_BIT)|(1 << SCK_BIT)|(1 << SS_BIT);
 3d2:	97 b3       	in	r25, 0x17	; 23
 3d4:	90 6b       	ori	r25, 0xB0	; 176
 3d6:	97 bb       	out	0x17, r25	; 23
	
	/* Slave Select pin is initially HIGH */
	SS_HIGH();
 3d8:	98 b3       	in	r25, 0x18	; 24
 3da:	90 61       	ori	r25, 0x10	; 16
 3dc:	98 bb       	out	0x18, r25	; 24
	
	/* Initialize SPI */
	SPCR = (1 << 6)|(1 << 4)|(mode << 2);  /* Enable SPI, master mode, MSB first, given mode */
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	80 65       	ori	r24, 0x50	; 80
 3ea:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (clk_div & 0x3); /* Clock rate division */
 3ec:	8d b1       	in	r24, 0x0d	; 13
 3ee:	96 2f       	mov	r25, r22
 3f0:	93 70       	andi	r25, 0x03	; 3
 3f2:	89 2b       	or	r24, r25
 3f4:	8d b9       	out	0x0d, r24	; 13
	if(clk_div & (1 << 2))
 3f6:	62 ff       	sbrs	r22, 2
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <SPI_Init+0x2c>
	{
		SPSR = 0x1;  /* SPI2X bit */
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	8e b9       	out	0x0e, r24	; 14
 3fe:	08 95       	ret

00000400 <SPI_TxRx>:
}


uint8_t SPI_TxRx(uint8_t data) {
	/* Start transmission */
	SPDR = data;
 400:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while((SPSR & (1 << SPIF)) == 0);
 402:	77 9b       	sbis	0x0e, 7	; 14
 404:	fe cf       	rjmp	.-4      	; 0x402 <SPI_TxRx+0x2>
	
	return SPDR;
 406:	8f b1       	in	r24, 0x0f	; 15
}
 408:	08 95       	ret

0000040a <mcu_init>:
	*left_right = (char)data[1];
	*forward_backward = (char)data[2];
	*siren = (char)data[3];
	*auto_manual_mode = (char)data[4];
	return 0;
}
 40a:	87 b3       	in	r24, 0x17	; 23
 40c:	82 60       	ori	r24, 0x02	; 2
 40e:	87 bb       	out	0x17, r24	; 23
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <SPI_Init>
 418:	85 b7       	in	r24, 0x35	; 53
 41a:	87 7f       	andi	r24, 0xF7	; 247
 41c:	85 bf       	out	0x35, r24	; 53
 41e:	85 b7       	in	r24, 0x35	; 53
 420:	8b 7f       	andi	r24, 0xFB	; 251
 422:	85 bf       	out	0x35, r24	; 53
 424:	8b b7       	in	r24, 0x3b	; 59
 426:	80 62       	ori	r24, 0x20	; 32
 428:	8b bf       	out	0x3b, r24	; 59
 42a:	08 95       	ret

0000042c <nrf_read_reg>:
 42c:	98 b3       	in	r25, 0x18	; 24
 42e:	9f 7e       	andi	r25, 0xEF	; 239
 430:	98 bb       	out	0x18, r25	; 24
 432:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 43c:	98 b3       	in	r25, 0x18	; 24
 43e:	90 61       	ori	r25, 0x10	; 16
 440:	98 bb       	out	0x18, r25	; 24
 442:	08 95       	ret

00000444 <nrf_write_multibyte_reg>:
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	d8 2f       	mov	r29, r24
 452:	8b 01       	movw	r16, r22
 454:	c4 2f       	mov	r28, r20
 456:	86 30       	cpi	r24, 0x06	; 6
 458:	49 f0       	breq	.+18     	; 0x46c <nrf_write_multibyte_reg+0x28>
 45a:	18 f4       	brcc	.+6      	; 0x462 <nrf_write_multibyte_reg+0x1e>
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	58 f5       	brcc	.+86     	; 0x4b6 <nrf_write_multibyte_reg+0x72>
 460:	05 c0       	rjmp	.+10     	; 0x46c <nrf_write_multibyte_reg+0x28>
 462:	87 30       	cpi	r24, 0x07	; 7
 464:	81 f0       	breq	.+32     	; 0x486 <nrf_write_multibyte_reg+0x42>
 466:	88 30       	cpi	r24, 0x08	; 8
 468:	a9 f0       	breq	.+42     	; 0x494 <nrf_write_multibyte_reg+0x50>
 46a:	25 c0       	rjmp	.+74     	; 0x4b6 <nrf_write_multibyte_reg+0x72>
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	0e 94 16 02 	call	0x42c	; 0x42c <nrf_read_reg>
 472:	c2 e0       	ldi	r28, 0x02	; 2
 474:	c8 0f       	add	r28, r24
 476:	88 b3       	in	r24, 0x18	; 24
 478:	8f 7e       	andi	r24, 0xEF	; 239
 47a:	88 bb       	out	0x18, r24	; 24
 47c:	8a e2       	ldi	r24, 0x2A	; 42
 47e:	8d 0f       	add	r24, r29
 480:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 484:	18 c0       	rjmp	.+48     	; 0x4b6 <nrf_write_multibyte_reg+0x72>
 486:	88 b3       	in	r24, 0x18	; 24
 488:	8f 7e       	andi	r24, 0xEF	; 239
 48a:	88 bb       	out	0x18, r24	; 24
 48c:	80 ea       	ldi	r24, 0xA0	; 160
 48e:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 492:	11 c0       	rjmp	.+34     	; 0x4b6 <nrf_write_multibyte_reg+0x72>
 494:	88 b3       	in	r24, 0x18	; 24
 496:	8f 7e       	andi	r24, 0xEF	; 239
 498:	88 bb       	out	0x18, r24	; 24
 49a:	80 eb       	ldi	r24, 0xB0	; 176
 49c:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 4a0:	0a c0       	rjmp	.+20     	; 0x4b6 <nrf_write_multibyte_reg+0x72>
 4a2:	78 01       	movw	r14, r16
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	e8 1a       	sub	r14, r24
 4a8:	f8 0a       	sbc	r15, r24
 4aa:	f8 01       	movw	r30, r16
 4ac:	80 81       	ld	r24, Z
 4ae:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 4b2:	cd 2f       	mov	r28, r29
 4b4:	87 01       	movw	r16, r14
 4b6:	df ef       	ldi	r29, 0xFF	; 255
 4b8:	dc 0f       	add	r29, r28
 4ba:	c1 11       	cpse	r28, r1
 4bc:	f2 cf       	rjmp	.-28     	; 0x4a2 <nrf_write_multibyte_reg+0x5e>
 4be:	88 b3       	in	r24, 0x18	; 24
 4c0:	80 61       	ori	r24, 0x10	; 16
 4c2:	88 bb       	out	0x18, r24	; 24
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	08 95       	ret

000004d2 <nrf_write_reg>:
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	c6 2f       	mov	r28, r22
 4d8:	98 b3       	in	r25, 0x18	; 24
 4da:	9f 7e       	andi	r25, 0xEF	; 239
 4dc:	98 bb       	out	0x18, r25	; 24
 4de:	80 32       	cpi	r24, 0x20	; 32
 4e0:	40 f4       	brcc	.+16     	; 0x4f2 <nrf_write_reg+0x20>
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 4e8:	d8 2f       	mov	r29, r24
 4ea:	8c 2f       	mov	r24, r28
 4ec:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 4f0:	08 c0       	rjmp	.+16     	; 0x502 <nrf_write_reg+0x30>
 4f2:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 4f6:	d8 2f       	mov	r29, r24
 4f8:	cc 23       	and	r28, r28
 4fa:	19 f0       	breq	.+6      	; 0x502 <nrf_write_reg+0x30>
 4fc:	8c 2f       	mov	r24, r28
 4fe:	0e 94 00 02 	call	0x400	; 0x400 <SPI_TxRx>
 502:	88 b3       	in	r24, 0x18	; 24
 504:	80 61       	ori	r24, 0x10	; 16
 506:	88 bb       	out	0x18, r24	; 24
 508:	8d 2f       	mov	r24, r29
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <nrf_set_address>:
 510:	86 30       	cpi	r24, 0x06	; 6
 512:	18 f4       	brcc	.+6      	; 0x51a <nrf_set_address+0xa>
 514:	82 30       	cpi	r24, 0x02	; 2
 516:	18 f0       	brcs	.+6      	; 0x51e <nrf_set_address+0xe>
 518:	06 c0       	rjmp	.+12     	; 0x526 <nrf_set_address+0x16>
 51a:	86 30       	cpi	r24, 0x06	; 6
 51c:	49 f4       	brne	.+18     	; 0x530 <nrf_set_address+0x20>
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	0e 94 22 02 	call	0x444	; 0x444 <nrf_write_multibyte_reg>
 524:	08 95       	ret
 526:	fb 01       	movw	r30, r22
 528:	60 81       	ld	r22, Z
 52a:	86 5f       	subi	r24, 0xF6	; 246
 52c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 530:	08 95       	ret

00000532 <nrf_init>:
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	cf 93       	push	r28
 538:	c8 2f       	mov	r28, r24
 53a:	8b 01       	movw	r16, r22
 53c:	0e 94 05 02 	call	0x40a	; 0x40a <mcu_init>
 540:	63 e0       	ldi	r22, 0x03	; 3
 542:	83 e0       	ldi	r24, 0x03	; 3
 544:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 548:	b8 01       	movw	r22, r16
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	0e 94 88 02 	call	0x510	; 0x510 <nrf_set_address>
 550:	b8 01       	movw	r22, r16
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	0e 94 88 02 	call	0x510	; 0x510 <nrf_set_address>
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 568:	c1 30       	cpi	r28, 0x01	; 1
 56a:	21 f4       	brne	.+8      	; 0x574 <nrf_init+0x42>
 56c:	60 e1       	ldi	r22, 0x10	; 16
 56e:	81 e1       	ldi	r24, 0x11	; 17
 570:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 574:	63 e7       	ldi	r22, 0x73	; 115
 576:	80 e5       	ldi	r24, 0x50	; 80
 578:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	8d e1       	ldi	r24, 0x1D	; 29
 580:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 584:	6f e1       	ldi	r22, 0x1F	; 31
 586:	84 e0       	ldi	r24, 0x04	; 4
 588:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 58c:	86 e0       	ldi	r24, 0x06	; 6
 58e:	0e 94 16 02 	call	0x42c	; 0x42c <nrf_read_reg>
 592:	81 7d       	andi	r24, 0xD1	; 209
 594:	68 2f       	mov	r22, r24
 596:	6e 60       	ori	r22, 0x0E	; 14
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 59e:	68 e2       	ldi	r22, 0x28	; 40
 5a0:	85 e0       	ldi	r24, 0x05	; 5
 5a2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 5a6:	c1 30       	cpi	r28, 0x01	; 1
 5a8:	11 f0       	breq	.+4      	; 0x5ae <nrf_init+0x7c>
 5aa:	6e e0       	ldi	r22, 0x0E	; 14
 5ac:	01 c0       	rjmp	.+2      	; 0x5b0 <nrf_init+0x7e>
 5ae:	6f e0       	ldi	r22, 0x0F	; 15
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
 5b6:	c1 30       	cpi	r28, 0x01	; 1
 5b8:	19 f4       	brne	.+6      	; 0x5c0 <nrf_init+0x8e>
 5ba:	88 b3       	in	r24, 0x18	; 24
 5bc:	82 60       	ori	r24, 0x02	; 2
 5be:	88 bb       	out	0x18, r24	; 24
 5c0:	8f e0       	ldi	r24, 0x0F	; 15
 5c2:	97 e2       	ldi	r25, 0x27	; 39
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <nrf_init+0x92>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <nrf_init+0x98>
 5ca:	00 00       	nop
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <__vector_3>:


/* ISR for  IRQ */
ISR(INT2_vect) {
 5d4:	1f 92       	push	r1
 5d6:	0f 92       	push	r0
 5d8:	0f b6       	in	r0, 0x3f	; 63
 5da:	0f 92       	push	r0
 5dc:	11 24       	eor	r1, r1
 5de:	2f 93       	push	r18
 5e0:	3f 93       	push	r19
 5e2:	4f 93       	push	r20
 5e4:	5f 93       	push	r21
 5e6:	6f 93       	push	r22
 5e8:	7f 93       	push	r23
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
 5ee:	af 93       	push	r26
 5f0:	bf 93       	push	r27
 5f2:	ef 93       	push	r30
 5f4:	ff 93       	push	r31
	uint8_t status;
	
	status = nrf_write_reg(STATUS, (STAT_MAX_RT|STAT_TX_DS|STAT_RX_DR)); /* Get and clear interrupt flags */
 5f6:	60 e7       	ldi	r22, 0x70	; 112
 5f8:	87 e0       	ldi	r24, 0x07	; 7
 5fa:	0e 94 69 02 	call	0x4d2	; 0x4d2 <nrf_write_reg>
	if(status & STAT_RX_DR) {
 5fe:	86 ff       	sbrs	r24, 6
 600:	03 c0       	rjmp	.+6      	; 0x608 <__vector_3+0x34>
		/* received data */
		rx_ready = true;
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <rx_ready>
	}
	
	if(status & STAT_TX_DS) {
 608:	85 ff       	sbrs	r24, 5
 60a:	03 c0       	rjmp	.+6      	; 0x612 <__vector_3+0x3e>
		/* transmit done */
		tx_done = true;
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <tx_done>
	}
	
	if(status & STAT_MAX_RT) {
 612:	84 ff       	sbrs	r24, 4
 614:	03 c0       	rjmp	.+6      	; 0x61c <__vector_3+0x48>
		/* Maximum reties exceeded */
		max_retries = true;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__data_end>
	}
}
 61c:	ff 91       	pop	r31
 61e:	ef 91       	pop	r30
 620:	bf 91       	pop	r27
 622:	af 91       	pop	r26
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	7f 91       	pop	r23
 62a:	6f 91       	pop	r22
 62c:	5f 91       	pop	r21
 62e:	4f 91       	pop	r20
 630:	3f 91       	pop	r19
 632:	2f 91       	pop	r18
 634:	0f 90       	pop	r0
 636:	0f be       	out	0x3f, r0	; 63
 638:	0f 90       	pop	r0
 63a:	1f 90       	pop	r1
 63c:	18 95       	reti

0000063e <toggle>:
	delay(400);
}

void LCD_lef_sh() {
	LCD_cmd(0x18);      //----Command for Left Shift
	delay(200);
 63e:	83 b1       	in	r24, 0x03	; 3
 640:	82 60       	ori	r24, 0x02	; 2
 642:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 646:	83 b1       	in	r24, 0x03	; 3
 648:	8d 7f       	andi	r24, 0xFD	; 253
 64a:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 64e:	08 95       	ret

00000650 <LCD_cmd_hf>:
 650:	cf 93       	push	r28
 652:	c8 2f       	mov	r28, r24
 654:	83 b1       	in	r24, 0x03	; 3
 656:	8e 7f       	andi	r24, 0xFE	; 254
 658:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 65c:	83 b1       	in	r24, 0x03	; 3
 65e:	8f 70       	andi	r24, 0x0F	; 15
 660:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 664:	83 b1       	in	r24, 0x03	; 3
 666:	c0 7f       	andi	r28, 0xF0	; 240
 668:	8c 2b       	or	r24, r28
 66a:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 66e:	0e 94 1f 03 	call	0x63e	; 0x63e <toggle>
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <LCD_cmd>:
 676:	cf 93       	push	r28
 678:	c8 2f       	mov	r28, r24
 67a:	83 b1       	in	r24, 0x03	; 3
 67c:	8e 7f       	andi	r24, 0xFE	; 254
 67e:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 682:	83 b1       	in	r24, 0x03	; 3
 684:	8f 70       	andi	r24, 0x0F	; 15
 686:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 68a:	83 b1       	in	r24, 0x03	; 3
 68c:	9c 2f       	mov	r25, r28
 68e:	90 7f       	andi	r25, 0xF0	; 240
 690:	89 2b       	or	r24, r25
 692:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 696:	0e 94 1f 03 	call	0x63e	; 0x63e <toggle>
 69a:	83 b1       	in	r24, 0x03	; 3
 69c:	8f 70       	andi	r24, 0x0F	; 15
 69e:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6a2:	23 b1       	in	r18, 0x03	; 3
 6a4:	30 e1       	ldi	r19, 0x10	; 16
 6a6:	c3 9f       	mul	r28, r19
 6a8:	c0 01       	movw	r24, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	82 2b       	or	r24, r18
 6ae:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6b2:	0e 94 1f 03 	call	0x63e	; 0x63e <toggle>
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <LCD_dwr>:
 6ba:	cf 93       	push	r28
 6bc:	c8 2f       	mov	r28, r24
 6be:	83 b1       	in	r24, 0x03	; 3
 6c0:	81 60       	ori	r24, 0x01	; 1
 6c2:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6c6:	83 b1       	in	r24, 0x03	; 3
 6c8:	8f 70       	andi	r24, 0x0F	; 15
 6ca:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6ce:	83 b1       	in	r24, 0x03	; 3
 6d0:	9c 2f       	mov	r25, r28
 6d2:	90 7f       	andi	r25, 0xF0	; 240
 6d4:	89 2b       	or	r24, r25
 6d6:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6da:	0e 94 1f 03 	call	0x63e	; 0x63e <toggle>
 6de:	83 b1       	in	r24, 0x03	; 3
 6e0:	8f 70       	andi	r24, 0x0F	; 15
 6e2:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6e6:	23 b1       	in	r18, 0x03	; 3
 6e8:	30 e1       	ldi	r19, 0x10	; 16
 6ea:	c3 9f       	mul	r28, r19
 6ec:	c0 01       	movw	r24, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	82 2b       	or	r24, r18
 6f2:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_write>
 6f6:	0e 94 1f 03 	call	0x63e	; 0x63e <toggle>
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <LCD_init>:
 6fe:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	80 e7       	ldi	r24, 0x70	; 112
 708:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
 70c:	80 e3       	ldi	r24, 0x30	; 48
 70e:	0e 94 28 03 	call	0x650	; 0x650 <LCD_cmd_hf>
 712:	80 e3       	ldi	r24, 0x30	; 48
 714:	0e 94 28 03 	call	0x650	; 0x650 <LCD_cmd_hf>
 718:	80 e2       	ldi	r24, 0x20	; 32
 71a:	0e 94 28 03 	call	0x650	; 0x650 <LCD_cmd_hf>
 71e:	88 e2       	ldi	r24, 0x28	; 40
 720:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
 724:	8c e0       	ldi	r24, 0x0C	; 12
 726:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
 736:	80 e8       	ldi	r24, 0x80	; 128
 738:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
 73c:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
 740:	08 95       	ret

00000742 <LCD_char>:
 742:	cf 93       	push	r28
 744:	c8 2f       	mov	r28, r24
 746:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	70 e0       	ldi	r23, 0x00	; 0
 74e:	80 e7       	ldi	r24, 0x70	; 112
 750:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
 754:	8c 2f       	mov	r24, r28
 756:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_dwr>
 75a:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <LCD_msg>:
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	ec 01       	movw	r28, r24
 768:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
 76c:	60 e0       	ldi	r22, 0x00	; 0
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	80 e7       	ldi	r24, 0x70	; 112
 772:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
 776:	03 c0       	rjmp	.+6      	; 0x77e <LCD_msg+0x1c>
 778:	21 96       	adiw	r28, 0x01	; 1
 77a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_dwr>
 77e:	88 81       	ld	r24, Y
 780:	81 11       	cpse	r24, r1
 782:	fa cf       	rjmp	.-12     	; 0x778 <LCD_msg+0x16>
 784:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <LCD_clear_msg>:
}

void LCD_clear_msg(char* c) {
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	ec 01       	movw	r28, r24
	I2C_start();
 794:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
	I2C_select_slave(LCD_ADDRESS, WRITE);
 798:	60 e0       	ldi	r22, 0x00	; 0
 79a:	70 e0       	ldi	r23, 0x00	; 0
 79c:	80 e7       	ldi	r24, 0x70	; 112
 79e:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
	
	LCD_cmd(0x01);
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
	LCD_cmd(0x80);
 7a8:	80 e8       	ldi	r24, 0x80	; 128
 7aa:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
	
	while(*c != 0)      //----Wait till all String are passed to LCD
 7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <LCD_clear_msg+0x28>
		LCD_dwr(*c++);	//----Send the String to LCD
 7b0:	21 96       	adiw	r28, 0x01	; 1
 7b2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <LCD_dwr>
	I2C_select_slave(LCD_ADDRESS, WRITE);
	
	LCD_cmd(0x01);
	LCD_cmd(0x80);
	
	while(*c != 0)      //----Wait till all String are passed to LCD
 7b6:	88 81       	ld	r24, Y
 7b8:	81 11       	cpse	r24, r1
 7ba:	fa cf       	rjmp	.-12     	; 0x7b0 <LCD_clear_msg+0x22>
		LCD_dwr(*c++);	//----Send the String to LCD
	
	I2C_stop();
 7bc:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
}
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	08 95       	ret

000007c6 <LCD_clear>:

void LCD_clear() {
	I2C_start();
 7c6:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
	I2C_select_slave(LCD_ADDRESS, WRITE);
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	80 e7       	ldi	r24, 0x70	; 112
 7d0:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
	
	LCD_cmd(0x01);
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
	LCD_cmd(0x80);
 7da:	80 e8       	ldi	r24, 0x80	; 128
 7dc:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
	
	I2C_stop();
 7e0:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
 7e4:	08 95       	ret

000007e6 <LCD_line_1>:
}

void LCD_line_1() {
	I2C_start();
 7e6:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
	I2C_select_slave(LCD_ADDRESS, WRITE);
 7ea:	60 e0       	ldi	r22, 0x00	; 0
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	80 e7       	ldi	r24, 0x70	; 112
 7f0:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
	
	LCD_cmd(0x80);
 7f4:	80 e8       	ldi	r24, 0x80	; 128
 7f6:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
	
	I2C_stop();
 7fa:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
 7fe:	08 95       	ret

00000800 <LCD_line_2>:
}

void LCD_line_2() {
	I2C_start();
 800:	0e 94 20 01 	call	0x240	; 0x240 <I2C_start>
	I2C_select_slave(LCD_ADDRESS, WRITE);
 804:	60 e0       	ldi	r22, 0x00	; 0
 806:	70 e0       	ldi	r23, 0x00	; 0
 808:	80 e7       	ldi	r24, 0x70	; 112
 80a:	0e 94 2b 01 	call	0x256	; 0x256 <I2C_select_slave>
	
	LCD_cmd(0xC0);
 80e:	80 ec       	ldi	r24, 0xC0	; 192
 810:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_cmd>
	
	I2C_stop();
 814:	0e 94 2f 01 	call	0x25e	; 0x25e <I2C_stop>
 818:	08 95       	ret

0000081a <select_register>:
 * Parameter
 *	- Registers according to ports (A, B, C, D)
 * Return
 *	- Pointer of selected register.
 */
volatile uint8_t* select_register(char portChar, volatile uint8_t* A, volatile uint8_t* B, volatile uint8_t* C, volatile uint8_t* D) {
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
	switch(portChar) { // Select register
 81e:	82 34       	cpi	r24, 0x42	; 66
 820:	59 f0       	breq	.+22     	; 0x838 <select_register+0x1e>
 822:	18 f4       	brcc	.+6      	; 0x82a <select_register+0x10>
 824:	81 34       	cpi	r24, 0x41	; 65
 826:	89 f0       	breq	.+34     	; 0x84a <select_register+0x30>
 828:	04 c0       	rjmp	.+8      	; 0x832 <select_register+0x18>
 82a:	83 34       	cpi	r24, 0x43	; 67
 82c:	41 f0       	breq	.+16     	; 0x83e <select_register+0x24>
 82e:	84 34       	cpi	r24, 0x44	; 68
 830:	49 f0       	breq	.+18     	; 0x844 <select_register+0x2a>
			// PORT D
			return D;
			break;
		default:
			// Error
			return NULL;
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0b c0       	rjmp	.+22     	; 0x84e <select_register+0x34>
			// PORT A
			return A;
			break;
		case 'B':
			// PORT B
			return B;
 838:	84 2f       	mov	r24, r20
 83a:	95 2f       	mov	r25, r21
 83c:	08 c0       	rjmp	.+16     	; 0x84e <select_register+0x34>
			break;
		case 'C':
			// PORT C
			return C;
 83e:	82 2f       	mov	r24, r18
 840:	93 2f       	mov	r25, r19
 842:	05 c0       	rjmp	.+10     	; 0x84e <select_register+0x34>
			break;
		case 'D':
			// PORT D
			return D;
 844:	80 2f       	mov	r24, r16
 846:	91 2f       	mov	r25, r17
 848:	02 c0       	rjmp	.+4      	; 0x84e <select_register+0x34>
 */
volatile uint8_t* select_register(char portChar, volatile uint8_t* A, volatile uint8_t* B, volatile uint8_t* C, volatile uint8_t* D) {
	switch(portChar) { // Select register
		case 'A':
			// PORT A
			return A;
 84a:	86 2f       	mov	r24, r22
 84c:	97 2f       	mov	r25, r23
			break;
		default:
			// Error
			return NULL;
	}
}
 84e:	1f 91       	pop	r17
 850:	0f 91       	pop	r16
 852:	08 95       	ret

00000854 <pin_mode>:
 *	- pin (string) - Input pin eg: A1, B4
 *	- mode (int) - 0 for output, 1 for input (INPUT, OUTPUT, INPUT_PULLUP)
 * Return
 *	- (int) - 0 if no errors.
 */
int pin_mode(Pin pin, int mode) {
 854:	cf 92       	push	r12
 856:	df 92       	push	r13
 858:	ef 92       	push	r14
 85a:	ff 92       	push	r15
 85c:	0f 93       	push	r16
 85e:	1f 93       	push	r17
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	c8 2e       	mov	r12, r24
 866:	d9 2e       	mov	r13, r25
 868:	eb 01       	movw	r28, r22
	volatile uint8_t *regi = select_register(pin.port, &DDRA, &DDRB, &DDRC, &DDRD); // Select DDR according to pin
 86a:	01 e3       	ldi	r16, 0x31	; 49
 86c:	10 e0       	ldi	r17, 0x00	; 0
 86e:	24 e3       	ldi	r18, 0x34	; 52
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	47 e3       	ldi	r20, 0x37	; 55
 874:	50 e0       	ldi	r21, 0x00	; 0
 876:	6a e3       	ldi	r22, 0x3A	; 58
 878:	70 e0       	ldi	r23, 0x00	; 0
 87a:	89 2f       	mov	r24, r25
 87c:	0e 94 0d 04 	call	0x81a	; 0x81a <select_register>
 880:	7c 01       	movw	r14, r24
	
	if (mode == 0) { // Check input or output
 882:	20 97       	sbiw	r28, 0x00	; 0
 884:	79 f4       	brne	.+30     	; 0x8a4 <__stack+0x45>
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
 886:	dc 01       	movw	r26, r24
 888:	2c 91       	ld	r18, X
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	ca 94       	dec	r12
 896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
 898:	80 95       	com	r24
 89a:	82 23       	and	r24, r18
 89c:	8c 93       	st	X, r24
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
		*_regi |= (1 << pin.pin); // Set pin as Input Pull up
	} else {
		return -1; // Return Error
	}
	return 0;
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	34 c0       	rjmp	.+104    	; 0x90c <__stack+0xad>
int pin_mode(Pin pin, int mode) {
	volatile uint8_t *regi = select_register(pin.port, &DDRA, &DDRB, &DDRC, &DDRD); // Select DDR according to pin
	
	if (mode == 0) { // Check input or output
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
	} else if (mode == 1) {
 8a4:	c1 30       	cpi	r28, 0x01	; 1
 8a6:	d1 05       	cpc	r29, r1
 8a8:	71 f4       	brne	.+28     	; 0x8c6 <__stack+0x67>
		*regi |= (1 << pin.pin); // Set pin as Output pin
 8aa:	fc 01       	movw	r30, r24
 8ac:	20 81       	ld	r18, Z
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <__stack+0x59>
 8b4:	88 0f       	add	r24, r24
 8b6:	99 1f       	adc	r25, r25
 8b8:	ca 94       	dec	r12
 8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <__stack+0x55>
 8bc:	82 2b       	or	r24, r18
 8be:	80 83       	st	Z, r24
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
		*_regi |= (1 << pin.pin); // Set pin as Input Pull up
	} else {
		return -1; // Return Error
	}
	return 0;
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	23 c0       	rjmp	.+70     	; 0x90c <__stack+0xad>
	
	if (mode == 0) { // Check input or output
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
	} else if (mode == 1) {
		*regi |= (1 << pin.pin); // Set pin as Output pin
	} else if (mode == 2){
 8c6:	22 97       	sbiw	r28, 0x02	; 2
 8c8:	f9 f4       	brne	.+62     	; 0x908 <__stack+0xa9>
		volatile uint8_t *_regi = select_register(pin.port, &PORTA, &PORTB, &PORTC, &PORTD);
 8ca:	02 e3       	ldi	r16, 0x32	; 50
 8cc:	10 e0       	ldi	r17, 0x00	; 0
 8ce:	25 e3       	ldi	r18, 0x35	; 53
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	48 e3       	ldi	r20, 0x38	; 56
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	6b e3       	ldi	r22, 0x3B	; 59
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	8d 2d       	mov	r24, r13
 8dc:	0e 94 0d 04 	call	0x81a	; 0x81a <select_register>
 8e0:	fc 01       	movw	r30, r24
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
 8e2:	d7 01       	movw	r26, r14
 8e4:	9c 91       	ld	r25, X
 8e6:	21 e0       	ldi	r18, 0x01	; 1
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	ca 94       	dec	r12
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__stack+0x8d>
 8f4:	82 2f       	mov	r24, r18
 8f6:	80 95       	com	r24
 8f8:	98 23       	and	r25, r24
 8fa:	9c 93       	st	X, r25
		*_regi |= (1 << pin.pin); // Set pin as Input Pull up
 8fc:	80 81       	ld	r24, Z
 8fe:	28 2b       	or	r18, r24
 900:	20 83       	st	Z, r18
	} else {
		return -1; // Return Error
	}
	return 0;
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
	} else if (mode == 2){
		volatile uint8_t *_regi = select_register(pin.port, &PORTA, &PORTB, &PORTC, &PORTD);
		*regi &= ~(1 << pin.pin); // Set pin as Input pin
		*_regi |= (1 << pin.pin); // Set pin as Input Pull up
	} else {
		return -1; // Return Error
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 0;
}
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	ff 90       	pop	r15
 916:	ef 90       	pop	r14
 918:	df 90       	pop	r13
 91a:	cf 90       	pop	r12
 91c:	08 95       	ret

0000091e <SPI_master_init>:
 *	- None
 * Return
 *	- None
 */
void SPI_master_init() {
	pin_mode(SLAVE_SS_0, OUTPUT);		// Set SS pin as output
 91e:	61 e0       	ldi	r22, 0x01	; 1
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <SLAVE_SS_0>
 926:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <SLAVE_SS_0+0x1>
 92a:	0e 94 2a 04 	call	0x854	; 0x854 <pin_mode>
	pin_mode(MOSI, OUTPUT);		// Set MOSI pin as output
 92e:	61 e0       	ldi	r22, 0x01	; 1
 930:	70 e0       	ldi	r23, 0x00	; 0
 932:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <MOSI>
 936:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <MOSI+0x1>
 93a:	0e 94 2a 04 	call	0x854	; 0x854 <pin_mode>
	pin_mode(SCK, OUTPUT);		// Set SCK pin as output
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <SCK>
 946:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <SCK+0x1>
 94a:	0e 94 2a 04 	call	0x854	; 0x854 <pin_mode>
	pin_mode(MISO, INPUT);		// Set MISO pin as output
 94e:	60 e0       	ldi	r22, 0x00	; 0
 950:	70 e0       	ldi	r23, 0x00	; 0
 952:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <MISO>
 956:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <MISO+0x1>
 95a:	0e 94 2a 04 	call	0x854	; 0x854 <pin_mode>
	
	SPCR = 0x00;
 95e:	1d b8       	out	0x0d, r1	; 13
	
	SPCR |= (0 << SPIE);		// Disable interrupt
 960:	8d b1       	in	r24, 0x0d	; 13
 962:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (0 << DORD);		// Data order list; 0 => MSB transmitted first, 1 => LSB transmitted first
 964:	8d b1       	in	r24, 0x0d	; 13
 966:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << MSTR);		// Set as master; 1 => Master, 0 => Slave
 968:	8d b1       	in	r24, 0x0d	; 13
 96a:	80 61       	ori	r24, 0x10	; 16
 96c:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (0 << CPOL);		// Clock polarity; 1 => Clock start from logical one, 0=> Clock start from logical zero
 96e:	8d b1       	in	r24, 0x0d	; 13
 970:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (0 << CPHA);		// Clock phase; 1 => Data sample on trailing clock edge, 0 => Data sample on the leading clock edge
 972:	8d b1       	in	r24, 0x0d	; 13
 974:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (0 << SPR1) | (1 << SPR0);	// Set clock rate; Fosc/16
 976:	8d b1       	in	r24, 0x0d	; 13
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPE);			// Enable SPI (After configure everything, you can enable SPI. If you try to enable SPI before the configurations, you have to face some errors.)
 97c:	8d b1       	in	r24, 0x0d	; 13
 97e:	80 64       	ori	r24, 0x40	; 64
 980:	8d b9       	out	0x0d, r24	; 13
	
	SPSR &= ~(1 << SPI2X);		// No double speed clock rate; 1=> Double speed, 0 => Normal speed
 982:	8e b1       	in	r24, 0x0e	; 14
 984:	8e 7f       	andi	r24, 0xFE	; 254
 986:	8e b9       	out	0x0e, r24	; 14
 988:	08 95       	ret

0000098a <__floatunsisf>:
 98a:	e8 94       	clt
 98c:	09 c0       	rjmp	.+18     	; 0x9a0 <__floatsisf+0x12>

0000098e <__floatsisf>:
 98e:	97 fb       	bst	r25, 7
 990:	3e f4       	brtc	.+14     	; 0x9a0 <__floatsisf+0x12>
 992:	90 95       	com	r25
 994:	80 95       	com	r24
 996:	70 95       	com	r23
 998:	61 95       	neg	r22
 99a:	7f 4f       	sbci	r23, 0xFF	; 255
 99c:	8f 4f       	sbci	r24, 0xFF	; 255
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	99 23       	and	r25, r25
 9a2:	a9 f0       	breq	.+42     	; 0x9ce <__floatsisf+0x40>
 9a4:	f9 2f       	mov	r31, r25
 9a6:	96 e9       	ldi	r25, 0x96	; 150
 9a8:	bb 27       	eor	r27, r27
 9aa:	93 95       	inc	r25
 9ac:	f6 95       	lsr	r31
 9ae:	87 95       	ror	r24
 9b0:	77 95       	ror	r23
 9b2:	67 95       	ror	r22
 9b4:	b7 95       	ror	r27
 9b6:	f1 11       	cpse	r31, r1
 9b8:	f8 cf       	rjmp	.-16     	; 0x9aa <__floatsisf+0x1c>
 9ba:	fa f4       	brpl	.+62     	; 0x9fa <__floatsisf+0x6c>
 9bc:	bb 0f       	add	r27, r27
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__floatsisf+0x36>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	1b c0       	rjmp	.+54     	; 0x9fa <__floatsisf+0x6c>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	16 c0       	rjmp	.+44     	; 0x9fa <__floatsisf+0x6c>
 9ce:	88 23       	and	r24, r24
 9d0:	11 f0       	breq	.+4      	; 0x9d6 <__floatsisf+0x48>
 9d2:	96 e9       	ldi	r25, 0x96	; 150
 9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <__floatsisf+0x6a>
 9d6:	77 23       	and	r23, r23
 9d8:	21 f0       	breq	.+8      	; 0x9e2 <__floatsisf+0x54>
 9da:	9e e8       	ldi	r25, 0x8E	; 142
 9dc:	87 2f       	mov	r24, r23
 9de:	76 2f       	mov	r23, r22
 9e0:	05 c0       	rjmp	.+10     	; 0x9ec <__floatsisf+0x5e>
 9e2:	66 23       	and	r22, r22
 9e4:	71 f0       	breq	.+28     	; 0xa02 <__floatsisf+0x74>
 9e6:	96 e8       	ldi	r25, 0x86	; 134
 9e8:	86 2f       	mov	r24, r22
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	60 e0       	ldi	r22, 0x00	; 0
 9ee:	2a f0       	brmi	.+10     	; 0x9fa <__floatsisf+0x6c>
 9f0:	9a 95       	dec	r25
 9f2:	66 0f       	add	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	da f7       	brpl	.-10     	; 0x9f0 <__floatsisf+0x62>
 9fa:	88 0f       	add	r24, r24
 9fc:	96 95       	lsr	r25
 9fe:	87 95       	ror	r24
 a00:	97 f9       	bld	r25, 7
 a02:	08 95       	ret

00000a04 <__fp_split3>:
 a04:	57 fd       	sbrc	r21, 7
 a06:	90 58       	subi	r25, 0x80	; 128
 a08:	44 0f       	add	r20, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	59 f0       	breq	.+22     	; 0xa24 <__fp_splitA+0x10>
 a0e:	5f 3f       	cpi	r21, 0xFF	; 255
 a10:	71 f0       	breq	.+28     	; 0xa2e <__fp_splitA+0x1a>
 a12:	47 95       	ror	r20

00000a14 <__fp_splitA>:
 a14:	88 0f       	add	r24, r24
 a16:	97 fb       	bst	r25, 7
 a18:	99 1f       	adc	r25, r25
 a1a:	61 f0       	breq	.+24     	; 0xa34 <__fp_splitA+0x20>
 a1c:	9f 3f       	cpi	r25, 0xFF	; 255
 a1e:	79 f0       	breq	.+30     	; 0xa3e <__fp_splitA+0x2a>
 a20:	87 95       	ror	r24
 a22:	08 95       	ret
 a24:	12 16       	cp	r1, r18
 a26:	13 06       	cpc	r1, r19
 a28:	14 06       	cpc	r1, r20
 a2a:	55 1f       	adc	r21, r21
 a2c:	f2 cf       	rjmp	.-28     	; 0xa12 <__fp_split3+0xe>
 a2e:	46 95       	lsr	r20
 a30:	f1 df       	rcall	.-30     	; 0xa14 <__fp_splitA>
 a32:	08 c0       	rjmp	.+16     	; 0xa44 <__fp_splitA+0x30>
 a34:	16 16       	cp	r1, r22
 a36:	17 06       	cpc	r1, r23
 a38:	18 06       	cpc	r1, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	f1 cf       	rjmp	.-30     	; 0xa20 <__fp_splitA+0xc>
 a3e:	86 95       	lsr	r24
 a40:	71 05       	cpc	r23, r1
 a42:	61 05       	cpc	r22, r1
 a44:	08 94       	sec
 a46:	08 95       	ret

00000a48 <__fp_zero>:
 a48:	e8 94       	clt

00000a4a <__fp_szero>:
 a4a:	bb 27       	eor	r27, r27
 a4c:	66 27       	eor	r22, r22
 a4e:	77 27       	eor	r23, r23
 a50:	cb 01       	movw	r24, r22
 a52:	97 f9       	bld	r25, 7
 a54:	08 95       	ret

00000a56 <__mulsf3>:
 a56:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__mulsf3x>
 a5a:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__fp_round>
 a5e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__fp_pscA>
 a62:	38 f0       	brcs	.+14     	; 0xa72 <__mulsf3+0x1c>
 a64:	0e 94 a8 05 	call	0xb50	; 0xb50 <__fp_pscB>
 a68:	20 f0       	brcs	.+8      	; 0xa72 <__mulsf3+0x1c>
 a6a:	95 23       	and	r25, r21
 a6c:	11 f0       	breq	.+4      	; 0xa72 <__mulsf3+0x1c>
 a6e:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_inf>
 a72:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__fp_nan>
 a76:	11 24       	eor	r1, r1
 a78:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_szero>

00000a7c <__mulsf3x>:
 a7c:	0e 94 02 05 	call	0xa04	; 0xa04 <__fp_split3>
 a80:	70 f3       	brcs	.-36     	; 0xa5e <__mulsf3+0x8>

00000a82 <__mulsf3_pse>:
 a82:	95 9f       	mul	r25, r21
 a84:	c1 f3       	breq	.-16     	; 0xa76 <__mulsf3+0x20>
 a86:	95 0f       	add	r25, r21
 a88:	50 e0       	ldi	r21, 0x00	; 0
 a8a:	55 1f       	adc	r21, r21
 a8c:	62 9f       	mul	r22, r18
 a8e:	f0 01       	movw	r30, r0
 a90:	72 9f       	mul	r23, r18
 a92:	bb 27       	eor	r27, r27
 a94:	f0 0d       	add	r31, r0
 a96:	b1 1d       	adc	r27, r1
 a98:	63 9f       	mul	r22, r19
 a9a:	aa 27       	eor	r26, r26
 a9c:	f0 0d       	add	r31, r0
 a9e:	b1 1d       	adc	r27, r1
 aa0:	aa 1f       	adc	r26, r26
 aa2:	64 9f       	mul	r22, r20
 aa4:	66 27       	eor	r22, r22
 aa6:	b0 0d       	add	r27, r0
 aa8:	a1 1d       	adc	r26, r1
 aaa:	66 1f       	adc	r22, r22
 aac:	82 9f       	mul	r24, r18
 aae:	22 27       	eor	r18, r18
 ab0:	b0 0d       	add	r27, r0
 ab2:	a1 1d       	adc	r26, r1
 ab4:	62 1f       	adc	r22, r18
 ab6:	73 9f       	mul	r23, r19
 ab8:	b0 0d       	add	r27, r0
 aba:	a1 1d       	adc	r26, r1
 abc:	62 1f       	adc	r22, r18
 abe:	83 9f       	mul	r24, r19
 ac0:	a0 0d       	add	r26, r0
 ac2:	61 1d       	adc	r22, r1
 ac4:	22 1f       	adc	r18, r18
 ac6:	74 9f       	mul	r23, r20
 ac8:	33 27       	eor	r19, r19
 aca:	a0 0d       	add	r26, r0
 acc:	61 1d       	adc	r22, r1
 ace:	23 1f       	adc	r18, r19
 ad0:	84 9f       	mul	r24, r20
 ad2:	60 0d       	add	r22, r0
 ad4:	21 1d       	adc	r18, r1
 ad6:	82 2f       	mov	r24, r18
 ad8:	76 2f       	mov	r23, r22
 ada:	6a 2f       	mov	r22, r26
 adc:	11 24       	eor	r1, r1
 ade:	9f 57       	subi	r25, 0x7F	; 127
 ae0:	50 40       	sbci	r21, 0x00	; 0
 ae2:	9a f0       	brmi	.+38     	; 0xb0a <__mulsf3_pse+0x88>
 ae4:	f1 f0       	breq	.+60     	; 0xb22 <__mulsf3_pse+0xa0>
 ae6:	88 23       	and	r24, r24
 ae8:	4a f0       	brmi	.+18     	; 0xafc <__mulsf3_pse+0x7a>
 aea:	ee 0f       	add	r30, r30
 aec:	ff 1f       	adc	r31, r31
 aee:	bb 1f       	adc	r27, r27
 af0:	66 1f       	adc	r22, r22
 af2:	77 1f       	adc	r23, r23
 af4:	88 1f       	adc	r24, r24
 af6:	91 50       	subi	r25, 0x01	; 1
 af8:	50 40       	sbci	r21, 0x00	; 0
 afa:	a9 f7       	brne	.-22     	; 0xae6 <__mulsf3_pse+0x64>
 afc:	9e 3f       	cpi	r25, 0xFE	; 254
 afe:	51 05       	cpc	r21, r1
 b00:	80 f0       	brcs	.+32     	; 0xb22 <__mulsf3_pse+0xa0>
 b02:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__fp_inf>
 b06:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <__fp_szero>
 b0a:	5f 3f       	cpi	r21, 0xFF	; 255
 b0c:	e4 f3       	brlt	.-8      	; 0xb06 <__mulsf3_pse+0x84>
 b0e:	98 3e       	cpi	r25, 0xE8	; 232
 b10:	d4 f3       	brlt	.-12     	; 0xb06 <__mulsf3_pse+0x84>
 b12:	86 95       	lsr	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b7 95       	ror	r27
 b1a:	f7 95       	ror	r31
 b1c:	e7 95       	ror	r30
 b1e:	9f 5f       	subi	r25, 0xFF	; 255
 b20:	c1 f7       	brne	.-16     	; 0xb12 <__mulsf3_pse+0x90>
 b22:	fe 2b       	or	r31, r30
 b24:	88 0f       	add	r24, r24
 b26:	91 1d       	adc	r25, r1
 b28:	96 95       	lsr	r25
 b2a:	87 95       	ror	r24
 b2c:	97 f9       	bld	r25, 7
 b2e:	08 95       	ret

00000b30 <__fp_inf>:
 b30:	97 f9       	bld	r25, 7
 b32:	9f 67       	ori	r25, 0x7F	; 127
 b34:	80 e8       	ldi	r24, 0x80	; 128
 b36:	70 e0       	ldi	r23, 0x00	; 0
 b38:	60 e0       	ldi	r22, 0x00	; 0
 b3a:	08 95       	ret

00000b3c <__fp_nan>:
 b3c:	9f ef       	ldi	r25, 0xFF	; 255
 b3e:	80 ec       	ldi	r24, 0xC0	; 192
 b40:	08 95       	ret

00000b42 <__fp_pscA>:
 b42:	00 24       	eor	r0, r0
 b44:	0a 94       	dec	r0
 b46:	16 16       	cp	r1, r22
 b48:	17 06       	cpc	r1, r23
 b4a:	18 06       	cpc	r1, r24
 b4c:	09 06       	cpc	r0, r25
 b4e:	08 95       	ret

00000b50 <__fp_pscB>:
 b50:	00 24       	eor	r0, r0
 b52:	0a 94       	dec	r0
 b54:	12 16       	cp	r1, r18
 b56:	13 06       	cpc	r1, r19
 b58:	14 06       	cpc	r1, r20
 b5a:	05 06       	cpc	r0, r21
 b5c:	08 95       	ret

00000b5e <__fp_round>:
 b5e:	09 2e       	mov	r0, r25
 b60:	03 94       	inc	r0
 b62:	00 0c       	add	r0, r0
 b64:	11 f4       	brne	.+4      	; 0xb6a <__fp_round+0xc>
 b66:	88 23       	and	r24, r24
 b68:	52 f0       	brmi	.+20     	; 0xb7e <__fp_round+0x20>
 b6a:	bb 0f       	add	r27, r27
 b6c:	40 f4       	brcc	.+16     	; 0xb7e <__fp_round+0x20>
 b6e:	bf 2b       	or	r27, r31
 b70:	11 f4       	brne	.+4      	; 0xb76 <__fp_round+0x18>
 b72:	60 ff       	sbrs	r22, 0
 b74:	04 c0       	rjmp	.+8      	; 0xb7e <__fp_round+0x20>
 b76:	6f 5f       	subi	r22, 0xFF	; 255
 b78:	7f 4f       	sbci	r23, 0xFF	; 255
 b7a:	8f 4f       	sbci	r24, 0xFF	; 255
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	08 95       	ret

00000b80 <strtod>:
 b80:	a0 e0       	ldi	r26, 0x00	; 0
 b82:	b0 e0       	ldi	r27, 0x00	; 0
 b84:	e6 ec       	ldi	r30, 0xC6	; 198
 b86:	f5 e0       	ldi	r31, 0x05	; 5
 b88:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__prologue_saves__+0xc>
 b8c:	ec 01       	movw	r28, r24
 b8e:	6b 01       	movw	r12, r22
 b90:	61 15       	cp	r22, r1
 b92:	71 05       	cpc	r23, r1
 b94:	19 f0       	breq	.+6      	; 0xb9c <strtod+0x1c>
 b96:	fb 01       	movw	r30, r22
 b98:	91 83       	std	Z+1, r25	; 0x01
 b9a:	80 83       	st	Z, r24
 b9c:	7e 01       	movw	r14, r28
 b9e:	ff ef       	ldi	r31, 0xFF	; 255
 ba0:	ef 1a       	sub	r14, r31
 ba2:	ff 0a       	sbc	r15, r31
 ba4:	08 81       	ld	r16, Y
 ba6:	80 2f       	mov	r24, r16
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <isspace>
 bae:	89 2b       	or	r24, r25
 bb0:	11 f0       	breq	.+4      	; 0xbb6 <strtod+0x36>
 bb2:	e7 01       	movw	r28, r14
 bb4:	f3 cf       	rjmp	.-26     	; 0xb9c <strtod+0x1c>
 bb6:	0d 32       	cpi	r16, 0x2D	; 45
 bb8:	39 f4       	brne	.+14     	; 0xbc8 <strtod+0x48>
 bba:	7e 01       	movw	r14, r28
 bbc:	82 e0       	ldi	r24, 0x02	; 2
 bbe:	e8 0e       	add	r14, r24
 bc0:	f1 1c       	adc	r15, r1
 bc2:	09 81       	ldd	r16, Y+1	; 0x01
 bc4:	11 e0       	ldi	r17, 0x01	; 1
 bc6:	08 c0       	rjmp	.+16     	; 0xbd8 <strtod+0x58>
 bc8:	0b 32       	cpi	r16, 0x2B	; 43
 bca:	29 f4       	brne	.+10     	; 0xbd6 <strtod+0x56>
 bcc:	7e 01       	movw	r14, r28
 bce:	92 e0       	ldi	r25, 0x02	; 2
 bd0:	e9 0e       	add	r14, r25
 bd2:	f1 1c       	adc	r15, r1
 bd4:	09 81       	ldd	r16, Y+1	; 0x01
 bd6:	10 e0       	ldi	r17, 0x00	; 0
 bd8:	e7 01       	movw	r28, r14
 bda:	21 97       	sbiw	r28, 0x01	; 1
 bdc:	43 e0       	ldi	r20, 0x03	; 3
 bde:	50 e0       	ldi	r21, 0x00	; 0
 be0:	6c e5       	ldi	r22, 0x5C	; 92
 be2:	70 e0       	ldi	r23, 0x00	; 0
 be4:	ce 01       	movw	r24, r28
 be6:	0e 94 17 07 	call	0xe2e	; 0xe2e <strncasecmp_P>
 bea:	89 2b       	or	r24, r25
 bec:	c1 f4       	brne	.+48     	; 0xc1e <strtod+0x9e>
 bee:	23 96       	adiw	r28, 0x03	; 3
 bf0:	45 e0       	ldi	r20, 0x05	; 5
 bf2:	50 e0       	ldi	r21, 0x00	; 0
 bf4:	67 e5       	ldi	r22, 0x57	; 87
 bf6:	70 e0       	ldi	r23, 0x00	; 0
 bf8:	ce 01       	movw	r24, r28
 bfa:	0e 94 17 07 	call	0xe2e	; 0xe2e <strncasecmp_P>
 bfe:	89 2b       	or	r24, r25
 c00:	09 f4       	brne	.+2      	; 0xc04 <strtod+0x84>
 c02:	25 96       	adiw	r28, 0x05	; 5
 c04:	c1 14       	cp	r12, r1
 c06:	d1 04       	cpc	r13, r1
 c08:	19 f0       	breq	.+6      	; 0xc10 <strtod+0x90>
 c0a:	f6 01       	movw	r30, r12
 c0c:	d1 83       	std	Z+1, r29	; 0x01
 c0e:	c0 83       	st	Z, r28
 c10:	11 11       	cpse	r17, r1
 c12:	f6 c0       	rjmp	.+492    	; 0xe00 <strtod+0x280>
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	80 e8       	ldi	r24, 0x80	; 128
 c1a:	9f e7       	ldi	r25, 0x7F	; 127
 c1c:	fa c0       	rjmp	.+500    	; 0xe12 <strtod+0x292>
 c1e:	43 e0       	ldi	r20, 0x03	; 3
 c20:	50 e0       	ldi	r21, 0x00	; 0
 c22:	64 e5       	ldi	r22, 0x54	; 84
 c24:	70 e0       	ldi	r23, 0x00	; 0
 c26:	ce 01       	movw	r24, r28
 c28:	0e 94 17 07 	call	0xe2e	; 0xe2e <strncasecmp_P>
 c2c:	89 2b       	or	r24, r25
 c2e:	59 f4       	brne	.+22     	; 0xc46 <strtod+0xc6>
 c30:	c1 14       	cp	r12, r1
 c32:	d1 04       	cpc	r13, r1
 c34:	09 f4       	brne	.+2      	; 0xc38 <strtod+0xb8>
 c36:	e9 c0       	rjmp	.+466    	; 0xe0a <strtod+0x28a>
 c38:	f2 e0       	ldi	r31, 0x02	; 2
 c3a:	ef 0e       	add	r14, r31
 c3c:	f1 1c       	adc	r15, r1
 c3e:	f6 01       	movw	r30, r12
 c40:	f1 82       	std	Z+1, r15	; 0x01
 c42:	e0 82       	st	Z, r14
 c44:	e2 c0       	rjmp	.+452    	; 0xe0a <strtod+0x28a>
 c46:	20 e0       	ldi	r18, 0x00	; 0
 c48:	30 e0       	ldi	r19, 0x00	; 0
 c4a:	a9 01       	movw	r20, r18
 c4c:	c0 e0       	ldi	r28, 0x00	; 0
 c4e:	d0 e0       	ldi	r29, 0x00	; 0
 c50:	f7 01       	movw	r30, r14
 c52:	80 ed       	ldi	r24, 0xD0	; 208
 c54:	a8 2e       	mov	r10, r24
 c56:	a0 0e       	add	r10, r16
 c58:	89 e0       	ldi	r24, 0x09	; 9
 c5a:	8a 15       	cp	r24, r10
 c5c:	30 f1       	brcs	.+76     	; 0xcaa <strtod+0x12a>
 c5e:	91 2f       	mov	r25, r17
 c60:	92 60       	ori	r25, 0x02	; 2
 c62:	b9 2e       	mov	r11, r25
 c64:	81 2f       	mov	r24, r17
 c66:	88 70       	andi	r24, 0x08	; 8
 c68:	12 ff       	sbrs	r17, 2
 c6a:	04 c0       	rjmp	.+8      	; 0xc74 <strtod+0xf4>
 c6c:	81 11       	cpse	r24, r1
 c6e:	24 c0       	rjmp	.+72     	; 0xcb8 <strtod+0x138>
 c70:	21 96       	adiw	r28, 0x01	; 1
 c72:	22 c0       	rjmp	.+68     	; 0xcb8 <strtod+0x138>
 c74:	81 11       	cpse	r24, r1
 c76:	21 97       	sbiw	r28, 0x01	; 1
 c78:	a5 e0       	ldi	r26, 0x05	; 5
 c7a:	b0 e0       	ldi	r27, 0x00	; 0
 c7c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__muluhisi3>
 c80:	dc 01       	movw	r26, r24
 c82:	cb 01       	movw	r24, r22
 c84:	88 0f       	add	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	aa 1f       	adc	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	9c 01       	movw	r18, r24
 c8e:	ad 01       	movw	r20, r26
 c90:	2a 0d       	add	r18, r10
 c92:	31 1d       	adc	r19, r1
 c94:	41 1d       	adc	r20, r1
 c96:	51 1d       	adc	r21, r1
 c98:	28 39       	cpi	r18, 0x98	; 152
 c9a:	89 e9       	ldi	r24, 0x99	; 153
 c9c:	38 07       	cpc	r19, r24
 c9e:	48 07       	cpc	r20, r24
 ca0:	89 e1       	ldi	r24, 0x19	; 25
 ca2:	58 07       	cpc	r21, r24
 ca4:	48 f0       	brcs	.+18     	; 0xcb8 <strtod+0x138>
 ca6:	16 60       	ori	r17, 0x06	; 6
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <strtod+0x136>
 caa:	9e ef       	ldi	r25, 0xFE	; 254
 cac:	a9 12       	cpse	r10, r25
 cae:	0a c0       	rjmp	.+20     	; 0xcc4 <strtod+0x144>
 cb0:	13 fd       	sbrc	r17, 3
 cb2:	40 c0       	rjmp	.+128    	; 0xd34 <strtod+0x1b4>
 cb4:	18 60       	ori	r17, 0x08	; 8
 cb6:	b1 2e       	mov	r11, r17
 cb8:	8f ef       	ldi	r24, 0xFF	; 255
 cba:	e8 1a       	sub	r14, r24
 cbc:	f8 0a       	sbc	r15, r24
 cbe:	00 81       	ld	r16, Z
 cc0:	1b 2d       	mov	r17, r11
 cc2:	c6 cf       	rjmp	.-116    	; 0xc50 <strtod+0xd0>
 cc4:	80 2f       	mov	r24, r16
 cc6:	8f 7d       	andi	r24, 0xDF	; 223
 cc8:	85 34       	cpi	r24, 0x45	; 69
 cca:	a1 f5       	brne	.+104    	; 0xd34 <strtod+0x1b4>
 ccc:	80 81       	ld	r24, Z
 cce:	8d 32       	cpi	r24, 0x2D	; 45
 cd0:	11 f4       	brne	.+4      	; 0xcd6 <strtod+0x156>
 cd2:	10 61       	ori	r17, 0x10	; 16
 cd4:	06 c0       	rjmp	.+12     	; 0xce2 <strtod+0x162>
 cd6:	8b 32       	cpi	r24, 0x2B	; 43
 cd8:	21 f0       	breq	.+8      	; 0xce2 <strtod+0x162>
 cda:	31 96       	adiw	r30, 0x01	; 1
 cdc:	61 e0       	ldi	r22, 0x01	; 1
 cde:	70 e0       	ldi	r23, 0x00	; 0
 ce0:	04 c0       	rjmp	.+8      	; 0xcea <strtod+0x16a>
 ce2:	81 81       	ldd	r24, Z+1	; 0x01
 ce4:	32 96       	adiw	r30, 0x02	; 2
 ce6:	62 e0       	ldi	r22, 0x02	; 2
 ce8:	70 e0       	ldi	r23, 0x00	; 0
 cea:	80 53       	subi	r24, 0x30	; 48
 cec:	8a 30       	cpi	r24, 0x0A	; 10
 cee:	18 f0       	brcs	.+6      	; 0xcf6 <strtod+0x176>
 cf0:	e6 1b       	sub	r30, r22
 cf2:	f7 0b       	sbc	r31, r23
 cf4:	1f c0       	rjmp	.+62     	; 0xd34 <strtod+0x1b4>
 cf6:	60 e0       	ldi	r22, 0x00	; 0
 cf8:	70 e0       	ldi	r23, 0x00	; 0
 cfa:	60 38       	cpi	r22, 0x80	; 128
 cfc:	9c e0       	ldi	r25, 0x0C	; 12
 cfe:	79 07       	cpc	r23, r25
 d00:	5c f4       	brge	.+22     	; 0xd18 <strtod+0x198>
 d02:	db 01       	movw	r26, r22
 d04:	aa 0f       	add	r26, r26
 d06:	bb 1f       	adc	r27, r27
 d08:	aa 0f       	add	r26, r26
 d0a:	bb 1f       	adc	r27, r27
 d0c:	6a 0f       	add	r22, r26
 d0e:	7b 1f       	adc	r23, r27
 d10:	66 0f       	add	r22, r22
 d12:	77 1f       	adc	r23, r23
 d14:	68 0f       	add	r22, r24
 d16:	71 1d       	adc	r23, r1
 d18:	31 96       	adiw	r30, 0x01	; 1
 d1a:	df 01       	movw	r26, r30
 d1c:	11 97       	sbiw	r26, 0x01	; 1
 d1e:	8c 91       	ld	r24, X
 d20:	80 53       	subi	r24, 0x30	; 48
 d22:	8a 30       	cpi	r24, 0x0A	; 10
 d24:	50 f3       	brcs	.-44     	; 0xcfa <strtod+0x17a>
 d26:	14 ff       	sbrs	r17, 4
 d28:	03 c0       	rjmp	.+6      	; 0xd30 <strtod+0x1b0>
 d2a:	71 95       	neg	r23
 d2c:	61 95       	neg	r22
 d2e:	71 09       	sbc	r23, r1
 d30:	c6 0f       	add	r28, r22
 d32:	d7 1f       	adc	r29, r23
 d34:	11 ff       	sbrs	r17, 1
 d36:	08 c0       	rjmp	.+16     	; 0xd48 <strtod+0x1c8>
 d38:	c1 14       	cp	r12, r1
 d3a:	d1 04       	cpc	r13, r1
 d3c:	29 f0       	breq	.+10     	; 0xd48 <strtod+0x1c8>
 d3e:	cf 01       	movw	r24, r30
 d40:	01 97       	sbiw	r24, 0x01	; 1
 d42:	f6 01       	movw	r30, r12
 d44:	91 83       	std	Z+1, r25	; 0x01
 d46:	80 83       	st	Z, r24
 d48:	ca 01       	movw	r24, r20
 d4a:	b9 01       	movw	r22, r18
 d4c:	0e 94 c5 04 	call	0x98a	; 0x98a <__floatunsisf>
 d50:	21 2f       	mov	r18, r17
 d52:	23 70       	andi	r18, 0x03	; 3
 d54:	23 30       	cpi	r18, 0x03	; 3
 d56:	19 f0       	breq	.+6      	; 0xd5e <strtod+0x1de>
 d58:	4b 01       	movw	r8, r22
 d5a:	5c 01       	movw	r10, r24
 d5c:	06 c0       	rjmp	.+12     	; 0xd6a <strtod+0x1ea>
 d5e:	4b 01       	movw	r8, r22
 d60:	5c 01       	movw	r10, r24
 d62:	b7 fa       	bst	r11, 7
 d64:	b0 94       	com	r11
 d66:	b7 f8       	bld	r11, 7
 d68:	b0 94       	com	r11
 d6a:	20 e0       	ldi	r18, 0x00	; 0
 d6c:	30 e0       	ldi	r19, 0x00	; 0
 d6e:	a9 01       	movw	r20, r18
 d70:	c5 01       	movw	r24, r10
 d72:	b4 01       	movw	r22, r8
 d74:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__cmpsf2>
 d78:	88 23       	and	r24, r24
 d7a:	09 f4       	brne	.+2      	; 0xd7e <strtod+0x1fe>
 d7c:	3e c0       	rjmp	.+124    	; 0xdfa <strtod+0x27a>
 d7e:	d7 ff       	sbrs	r29, 7
 d80:	06 c0       	rjmp	.+12     	; 0xd8e <strtod+0x20e>
 d82:	d1 95       	neg	r29
 d84:	c1 95       	neg	r28
 d86:	d1 09       	sbc	r29, r1
 d88:	03 e7       	ldi	r16, 0x73	; 115
 d8a:	10 e0       	ldi	r17, 0x00	; 0
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <strtod+0x212>
 d8e:	0b e8       	ldi	r16, 0x8B	; 139
 d90:	10 e0       	ldi	r17, 0x00	; 0
 d92:	68 01       	movw	r12, r16
 d94:	f8 e1       	ldi	r31, 0x18	; 24
 d96:	cf 1a       	sub	r12, r31
 d98:	d1 08       	sbc	r13, r1
 d9a:	90 e2       	ldi	r25, 0x20	; 32
 d9c:	e9 2e       	mov	r14, r25
 d9e:	f1 2c       	mov	r15, r1
 da0:	ce 15       	cp	r28, r14
 da2:	df 05       	cpc	r29, r15
 da4:	74 f0       	brlt	.+28     	; 0xdc2 <strtod+0x242>
 da6:	f8 01       	movw	r30, r16
 da8:	25 91       	lpm	r18, Z+
 daa:	35 91       	lpm	r19, Z+
 dac:	45 91       	lpm	r20, Z+
 dae:	54 91       	lpm	r21, Z
 db0:	c5 01       	movw	r24, r10
 db2:	b4 01       	movw	r22, r8
 db4:	0e 94 2b 05 	call	0xa56	; 0xa56 <__mulsf3>
 db8:	4b 01       	movw	r8, r22
 dba:	5c 01       	movw	r10, r24
 dbc:	ce 19       	sub	r28, r14
 dbe:	df 09       	sbc	r29, r15
 dc0:	ef cf       	rjmp	.-34     	; 0xda0 <strtod+0x220>
 dc2:	04 50       	subi	r16, 0x04	; 4
 dc4:	11 09       	sbc	r17, r1
 dc6:	f5 94       	asr	r15
 dc8:	e7 94       	ror	r14
 dca:	0c 15       	cp	r16, r12
 dcc:	1d 05       	cpc	r17, r13
 dce:	41 f7       	brne	.-48     	; 0xda0 <strtod+0x220>
 dd0:	8a 2d       	mov	r24, r10
 dd2:	88 0f       	add	r24, r24
 dd4:	8b 2d       	mov	r24, r11
 dd6:	88 1f       	adc	r24, r24
 dd8:	8f 3f       	cpi	r24, 0xFF	; 255
 dda:	49 f0       	breq	.+18     	; 0xdee <strtod+0x26e>
 ddc:	20 e0       	ldi	r18, 0x00	; 0
 dde:	30 e0       	ldi	r19, 0x00	; 0
 de0:	a9 01       	movw	r20, r18
 de2:	c5 01       	movw	r24, r10
 de4:	b4 01       	movw	r22, r8
 de6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <__cmpsf2>
 dea:	81 11       	cpse	r24, r1
 dec:	06 c0       	rjmp	.+12     	; 0xdfa <strtod+0x27a>
 dee:	82 e2       	ldi	r24, 0x22	; 34
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <errno+0x1>
 df6:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <errno>
 dfa:	c5 01       	movw	r24, r10
 dfc:	b4 01       	movw	r22, r8
 dfe:	09 c0       	rjmp	.+18     	; 0xe12 <strtod+0x292>
 e00:	60 e0       	ldi	r22, 0x00	; 0
 e02:	70 e0       	ldi	r23, 0x00	; 0
 e04:	80 e8       	ldi	r24, 0x80	; 128
 e06:	9f ef       	ldi	r25, 0xFF	; 255
 e08:	04 c0       	rjmp	.+8      	; 0xe12 <strtod+0x292>
 e0a:	60 e0       	ldi	r22, 0x00	; 0
 e0c:	70 e0       	ldi	r23, 0x00	; 0
 e0e:	80 ec       	ldi	r24, 0xC0	; 192
 e10:	9f e7       	ldi	r25, 0x7F	; 127
 e12:	cd b7       	in	r28, 0x3d	; 61
 e14:	de b7       	in	r29, 0x3e	; 62
 e16:	ec e0       	ldi	r30, 0x0C	; 12
 e18:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__epilogue_restores__+0xc>

00000e1c <isspace>:
 e1c:	91 11       	cpse	r25, r1
 e1e:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__ctype_isfalse>
 e22:	80 32       	cpi	r24, 0x20	; 32
 e24:	19 f0       	breq	.+6      	; 0xe2c <isspace+0x10>
 e26:	89 50       	subi	r24, 0x09	; 9
 e28:	85 50       	subi	r24, 0x05	; 5
 e2a:	c8 f7       	brcc	.-14     	; 0xe1e <isspace+0x2>
 e2c:	08 95       	ret

00000e2e <strncasecmp_P>:
 e2e:	fb 01       	movw	r30, r22
 e30:	dc 01       	movw	r26, r24
 e32:	41 50       	subi	r20, 0x01	; 1
 e34:	50 40       	sbci	r21, 0x00	; 0
 e36:	88 f0       	brcs	.+34     	; 0xe5a <strncasecmp_P+0x2c>
 e38:	8d 91       	ld	r24, X+
 e3a:	81 34       	cpi	r24, 0x41	; 65
 e3c:	1c f0       	brlt	.+6      	; 0xe44 <strncasecmp_P+0x16>
 e3e:	8b 35       	cpi	r24, 0x5B	; 91
 e40:	0c f4       	brge	.+2      	; 0xe44 <strncasecmp_P+0x16>
 e42:	80 5e       	subi	r24, 0xE0	; 224
 e44:	65 91       	lpm	r22, Z+
 e46:	61 34       	cpi	r22, 0x41	; 65
 e48:	1c f0       	brlt	.+6      	; 0xe50 <strncasecmp_P+0x22>
 e4a:	6b 35       	cpi	r22, 0x5B	; 91
 e4c:	0c f4       	brge	.+2      	; 0xe50 <strncasecmp_P+0x22>
 e4e:	60 5e       	subi	r22, 0xE0	; 224
 e50:	86 1b       	sub	r24, r22
 e52:	61 11       	cpse	r22, r1
 e54:	71 f3       	breq	.-36     	; 0xe32 <strncasecmp_P+0x4>
 e56:	99 0b       	sbc	r25, r25
 e58:	08 95       	ret
 e5a:	88 1b       	sub	r24, r24
 e5c:	fc cf       	rjmp	.-8      	; 0xe56 <strncasecmp_P+0x28>

00000e5e <__cmpsf2>:
 e5e:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_cmp>
 e62:	08 f4       	brcc	.+2      	; 0xe66 <__cmpsf2+0x8>
 e64:	81 e0       	ldi	r24, 0x01	; 1
 e66:	08 95       	ret

00000e68 <__fp_cmp>:
 e68:	99 0f       	add	r25, r25
 e6a:	00 08       	sbc	r0, r0
 e6c:	55 0f       	add	r21, r21
 e6e:	aa 0b       	sbc	r26, r26
 e70:	e0 e8       	ldi	r30, 0x80	; 128
 e72:	fe ef       	ldi	r31, 0xFE	; 254
 e74:	16 16       	cp	r1, r22
 e76:	17 06       	cpc	r1, r23
 e78:	e8 07       	cpc	r30, r24
 e7a:	f9 07       	cpc	r31, r25
 e7c:	c0 f0       	brcs	.+48     	; 0xeae <__fp_cmp+0x46>
 e7e:	12 16       	cp	r1, r18
 e80:	13 06       	cpc	r1, r19
 e82:	e4 07       	cpc	r30, r20
 e84:	f5 07       	cpc	r31, r21
 e86:	98 f0       	brcs	.+38     	; 0xeae <__fp_cmp+0x46>
 e88:	62 1b       	sub	r22, r18
 e8a:	73 0b       	sbc	r23, r19
 e8c:	84 0b       	sbc	r24, r20
 e8e:	95 0b       	sbc	r25, r21
 e90:	39 f4       	brne	.+14     	; 0xea0 <__fp_cmp+0x38>
 e92:	0a 26       	eor	r0, r26
 e94:	61 f0       	breq	.+24     	; 0xeae <__fp_cmp+0x46>
 e96:	23 2b       	or	r18, r19
 e98:	24 2b       	or	r18, r20
 e9a:	25 2b       	or	r18, r21
 e9c:	21 f4       	brne	.+8      	; 0xea6 <__fp_cmp+0x3e>
 e9e:	08 95       	ret
 ea0:	0a 26       	eor	r0, r26
 ea2:	09 f4       	brne	.+2      	; 0xea6 <__fp_cmp+0x3e>
 ea4:	a1 40       	sbci	r26, 0x01	; 1
 ea6:	a6 95       	lsr	r26
 ea8:	8f ef       	ldi	r24, 0xFF	; 255
 eaa:	81 1d       	adc	r24, r1
 eac:	81 1d       	adc	r24, r1
 eae:	08 95       	ret

00000eb0 <__ctype_isfalse>:
 eb0:	99 27       	eor	r25, r25
 eb2:	88 27       	eor	r24, r24

00000eb4 <__ctype_istrue>:
 eb4:	08 95       	ret

00000eb6 <__muluhisi3>:
 eb6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <__umulhisi3>
 eba:	a5 9f       	mul	r26, r21
 ebc:	90 0d       	add	r25, r0
 ebe:	b4 9f       	mul	r27, r20
 ec0:	90 0d       	add	r25, r0
 ec2:	a4 9f       	mul	r26, r20
 ec4:	80 0d       	add	r24, r0
 ec6:	91 1d       	adc	r25, r1
 ec8:	11 24       	eor	r1, r1
 eca:	08 95       	ret

00000ecc <__prologue_saves__>:
 ecc:	2f 92       	push	r2
 ece:	3f 92       	push	r3
 ed0:	4f 92       	push	r4
 ed2:	5f 92       	push	r5
 ed4:	6f 92       	push	r6
 ed6:	7f 92       	push	r7
 ed8:	8f 92       	push	r8
 eda:	9f 92       	push	r9
 edc:	af 92       	push	r10
 ede:	bf 92       	push	r11
 ee0:	cf 92       	push	r12
 ee2:	df 92       	push	r13
 ee4:	ef 92       	push	r14
 ee6:	ff 92       	push	r15
 ee8:	0f 93       	push	r16
 eea:	1f 93       	push	r17
 eec:	cf 93       	push	r28
 eee:	df 93       	push	r29
 ef0:	cd b7       	in	r28, 0x3d	; 61
 ef2:	de b7       	in	r29, 0x3e	; 62
 ef4:	ca 1b       	sub	r28, r26
 ef6:	db 0b       	sbc	r29, r27
 ef8:	0f b6       	in	r0, 0x3f	; 63
 efa:	f8 94       	cli
 efc:	de bf       	out	0x3e, r29	; 62
 efe:	0f be       	out	0x3f, r0	; 63
 f00:	cd bf       	out	0x3d, r28	; 61
 f02:	09 94       	ijmp

00000f04 <__epilogue_restores__>:
 f04:	2a 88       	ldd	r2, Y+18	; 0x12
 f06:	39 88       	ldd	r3, Y+17	; 0x11
 f08:	48 88       	ldd	r4, Y+16	; 0x10
 f0a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f0c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f0e:	7d 84       	ldd	r7, Y+13	; 0x0d
 f10:	8c 84       	ldd	r8, Y+12	; 0x0c
 f12:	9b 84       	ldd	r9, Y+11	; 0x0b
 f14:	aa 84       	ldd	r10, Y+10	; 0x0a
 f16:	b9 84       	ldd	r11, Y+9	; 0x09
 f18:	c8 84       	ldd	r12, Y+8	; 0x08
 f1a:	df 80       	ldd	r13, Y+7	; 0x07
 f1c:	ee 80       	ldd	r14, Y+6	; 0x06
 f1e:	fd 80       	ldd	r15, Y+5	; 0x05
 f20:	0c 81       	ldd	r16, Y+4	; 0x04
 f22:	1b 81       	ldd	r17, Y+3	; 0x03
 f24:	aa 81       	ldd	r26, Y+2	; 0x02
 f26:	b9 81       	ldd	r27, Y+1	; 0x01
 f28:	ce 0f       	add	r28, r30
 f2a:	d1 1d       	adc	r29, r1
 f2c:	0f b6       	in	r0, 0x3f	; 63
 f2e:	f8 94       	cli
 f30:	de bf       	out	0x3e, r29	; 62
 f32:	0f be       	out	0x3f, r0	; 63
 f34:	cd bf       	out	0x3d, r28	; 61
 f36:	ed 01       	movw	r28, r26
 f38:	08 95       	ret

00000f3a <__umulhisi3>:
 f3a:	a2 9f       	mul	r26, r18
 f3c:	b0 01       	movw	r22, r0
 f3e:	b3 9f       	mul	r27, r19
 f40:	c0 01       	movw	r24, r0
 f42:	a3 9f       	mul	r26, r19
 f44:	70 0d       	add	r23, r0
 f46:	81 1d       	adc	r24, r1
 f48:	11 24       	eor	r1, r1
 f4a:	91 1d       	adc	r25, r1
 f4c:	b2 9f       	mul	r27, r18
 f4e:	70 0d       	add	r23, r0
 f50:	81 1d       	adc	r24, r1
 f52:	11 24       	eor	r1, r1
 f54:	91 1d       	adc	r25, r1
 f56:	08 95       	ret

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
